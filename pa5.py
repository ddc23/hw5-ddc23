def gcd(a, b):    if b == 0:        return a    if a < b:        a, b = b, a    return gcd(b, a % b)def remove_pairs(path):    opposite = {'N': 'S', 'S': 'N', 'E': 'W', 'W': 'E'}    if len(path) < 2:        return path        first, second = path[0], path[1]        if second == opposite.get(first, ''):        return remove_pairs(path[2:])    else:        return first + remove_pairs(path[1:])def bisection_root(f, a, b, tol=1e-6):       if f(a) * f(b) >= 0:        raise ValueError("The function does not change signs within the given interval.")    while abs(b - a) > tol:        c = (a + b) / 2        if f(c) == 0 or abs(f(c)) < tol:            return c        elif f(a) * f(c) < 0:            b = c        else:            a = c    return (a + b) / 2